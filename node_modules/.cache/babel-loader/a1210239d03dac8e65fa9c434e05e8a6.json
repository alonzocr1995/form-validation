{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nconst initialState = {\n  value: \"\",\n  isTouched: false\n};\n\nconst inputStateReducer = (state, action) => {\n  if (action.type === \"CHANGE\") {\n    return {\n      value: action.value,\n      isTouched: state.isTouched\n    };\n  }\n\n  if (action.type === \"BLUR\") {\n    return {\n      isTouched: true,\n      value: state.value\n    };\n  }\n\n  if (action.type === \"RESET\") {\n    return {\n      value: \"\",\n      isTouched: false\n    };\n  }\n\n  return initialState;\n};\n\nconst useBasicInput = validateInput => {\n  _s();\n\n  const [inputState, dispatch] = useReducer(inputStateReducer, initialState); //   const [enteredValue, setEnteredValue] = useState(\"\");\n  //   const [isTouched, setIsTouched] = useState(false);\n\n  const isValid = validateInput(inputState.value);\n  const hasError = !isValid && inputState.isTouched;\n\n  const handleInputChange = e => {\n    dispatch({\n      type: \"CHANGE\",\n      value: e.target.value\n    });\n  };\n\n  const handleInputBlur = () => {\n    dispatch({\n      type: \"BLUR\"\n    });\n  };\n\n  const reset = () => {\n    dispatch({\n      type: \"RESET\"\n    });\n  };\n\n  return {\n    value: inputState.value,\n    isTouched: inputState.isTouched,\n    isValid,\n    hasError,\n    handleInputBlur,\n    handleInputChange,\n    reset\n  };\n};\n\n_s(useBasicInput, \"WTVy3W/BBpinEIavl2C9EMTzZQQ=\");\n\nexport default useBasicInput;","map":{"version":3,"sources":["C:/Users/alonz/OneDrive/Escritorio/Udemy React/section 16 forms/src/hooks/useBasicInput.js"],"names":["useReducer","initialState","value","isTouched","inputStateReducer","state","action","type","useBasicInput","validateInput","inputState","dispatch","isValid","hasError","handleInputChange","e","target","handleInputBlur","reset"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,SAAS,EAAE;AAFQ,CAArB;;AAKA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3C,MAAIA,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO;AAAEL,MAAAA,KAAK,EAAEI,MAAM,CAACJ,KAAhB;AAAuBC,MAAAA,SAAS,EAAEE,KAAK,CAACF;AAAxC,KAAP;AACD;;AACD,MAAIG,MAAM,CAACC,IAAP,KAAgB,MAApB,EAA4B;AAC1B,WAAO;AAAEJ,MAAAA,SAAS,EAAE,IAAb;AAAmBD,MAAAA,KAAK,EAAEG,KAAK,CAACH;AAAhC,KAAP;AACD;;AACD,MAAII,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,WAAO;AAAEL,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,SAAS,EAAE;AAAxB,KAAP;AACD;;AAED,SAAOF,YAAP;AACD,CAZD;;AAcA,MAAMO,aAAa,GAAIC,aAAD,IAAmB;AAAA;;AACvC,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBX,UAAU,CAACI,iBAAD,EAAoBH,YAApB,CAAzC,CADuC,CAEvC;AACA;;AACA,QAAMW,OAAO,GAAGH,aAAa,CAACC,UAAU,CAACR,KAAZ,CAA7B;AACA,QAAMW,QAAQ,GAAG,CAACD,OAAD,IAAYF,UAAU,CAACP,SAAxC;;AAEA,QAAMW,iBAAiB,GAAIC,CAAD,IAAO;AAC/BJ,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE,QAAR;AAAkBL,MAAAA,KAAK,EAAEa,CAAC,CAACC,MAAF,CAASd;AAAlC,KAAD,CAAR;AACD,GAFD;;AAGA,QAAMe,eAAe,GAAG,MAAM;AAC5BN,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD,GAFD;;AAGA,QAAMW,KAAK,GAAG,MAAM;AAClBP,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD,GAFD;;AAIA,SAAO;AACLL,IAAAA,KAAK,EAAEQ,UAAU,CAACR,KADb;AAELC,IAAAA,SAAS,EAAEO,UAAU,CAACP,SAFjB;AAGLS,IAAAA,OAHK;AAILC,IAAAA,QAJK;AAKLI,IAAAA,eALK;AAMLH,IAAAA,iBANK;AAOLI,IAAAA;AAPK,GAAP;AASD,CA1BD;;GAAMV,a;;AA4BN,eAAeA,aAAf","sourcesContent":["import { useReducer } from \"react\";\r\n\r\nconst initialState = {\r\n  value: \"\",\r\n  isTouched: false,\r\n};\r\n\r\nconst inputStateReducer = (state, action) => {\r\n  if (action.type === \"CHANGE\") {\r\n    return { value: action.value, isTouched: state.isTouched };\r\n  }\r\n  if (action.type === \"BLUR\") {\r\n    return { isTouched: true, value: state.value };\r\n  }\r\n  if (action.type === \"RESET\") {\r\n    return { value: \"\", isTouched: false };\r\n  }\r\n\r\n  return initialState;\r\n};\r\n\r\nconst useBasicInput = (validateInput) => {\r\n  const [inputState, dispatch] = useReducer(inputStateReducer, initialState);\r\n  //   const [enteredValue, setEnteredValue] = useState(\"\");\r\n  //   const [isTouched, setIsTouched] = useState(false);\r\n  const isValid = validateInput(inputState.value);\r\n  const hasError = !isValid && inputState.isTouched;\r\n\r\n  const handleInputChange = (e) => {\r\n    dispatch({ type: \"CHANGE\", value: e.target.value });\r\n  };\r\n  const handleInputBlur = () => {\r\n    dispatch({ type: \"BLUR\" });\r\n  };\r\n  const reset = () => {\r\n    dispatch({ type: \"RESET\" });\r\n  };\r\n\r\n  return {\r\n    value: inputState.value,\r\n    isTouched: inputState.isTouched,\r\n    isValid,\r\n    hasError,\r\n    handleInputBlur,\r\n    handleInputChange,\r\n    reset,\r\n  };\r\n};\r\n\r\nexport default useBasicInput;\r\n"]},"metadata":{},"sourceType":"module"}