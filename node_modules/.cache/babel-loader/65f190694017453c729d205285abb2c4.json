{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alonz\\\\OneDrive\\\\Escritorio\\\\Udemy React\\\\section 16 forms\\\\src\\\\components\\\\BasicForm.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport useBasicInput from \"../hooks/useBasicInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BasicForm = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: nameInputIsValid,\n    hasError: nameInputHasError,\n    handleInputChange: handleNameInputChange,\n    handleInputBlur: handleNameInputBlur,\n    reset: resetName\n  } = useBasicInput(value => value.trim() !== \"\");\n  const {\n    value: enteredLastName,\n    isValid: lastNameIsValid,\n    hasError: lastNameInputHasError,\n    handleInputChange: handleLastNameInputChange,\n    handleInputBlur: handleLastNameInputBlur,\n    reset: resetLastName\n  } = useBasicInput(value => value.trim() !== \"\");\n  const {\n    value: enteredEmail,\n    isValid: emailIsValid,\n    hasError: emailInputHasError,\n    handleInputChange: handleEmailInputChange,\n    handleInputBlur: handleEmilInputBlur,\n    reset: resetEmail\n  } = useBasicInput(value => /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(value));\n  let formIsValid = false;\n\n  if (nameInputIsValid && lastNameIsValid && emailIsValid) {\n    formIsValid = true;\n  }\n\n  const handleFormSubmission = e => {\n    e.preventDefault();\n\n    if (!nameInputIsValid && !lastNameIsValid && !emailIsValid) {\n      return;\n    }\n\n    console.log(enteredName, enteredLastName);\n    resetName();\n    resetLastName();\n    resetEmail();\n  };\n\n  const nameInputClasses = nameInputHasError ? \"form-control invalid\" : \"form-control\";\n  const lastNameInputClasses = lastNameInputHasError ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailInputHasError ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleFormSubmission,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: nameInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"First Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          value: enteredName,\n          onChange: handleNameInputChange,\n          onBlur: handleNameInputBlur\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Name can't be empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: lastNameInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"lastname\",\n          children: \"Last Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"lastname\",\n          value: enteredLastName,\n          onChange: handleLastNameInputChange,\n          onBlur: handleLastNameInputBlur\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), lastNameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Name can't be empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"E-Mail Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        value: enteredEmail,\n        onBlur: handleEmilInputBlur,\n        onChange: handleEmailInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), emailInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Name can't be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BasicForm, \"0+YqjMWD36cf4Okcb2THqWrWXTc=\", false, function () {\n  return [useBasicInput, useBasicInput, useBasicInput];\n});\n\n_c = BasicForm;\nexport default BasicForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BasicForm\");","map":{"version":3,"sources":["C:/Users/alonz/OneDrive/Escritorio/Udemy React/section 16 forms/src/components/BasicForm.js"],"names":["React","useBasicInput","BasicForm","props","value","enteredName","isValid","nameInputIsValid","hasError","nameInputHasError","handleInputChange","handleNameInputChange","handleInputBlur","handleNameInputBlur","reset","resetName","trim","enteredLastName","lastNameIsValid","lastNameInputHasError","handleLastNameInputChange","handleLastNameInputBlur","resetLastName","enteredEmail","emailIsValid","emailInputHasError","handleEmailInputChange","handleEmilInputBlur","resetEmail","test","formIsValid","handleFormSubmission","e","preventDefault","console","log","nameInputClasses","lastNameInputClasses","emailInputClasses"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport useBasicInput from \"../hooks/useBasicInput\";\n\nconst BasicForm = (props) => {\n  const {\n    value: enteredName,\n    isValid: nameInputIsValid,\n    hasError: nameInputHasError,\n    handleInputChange: handleNameInputChange,\n    handleInputBlur: handleNameInputBlur,\n    reset: resetName,\n  } = useBasicInput((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredLastName,\n    isValid: lastNameIsValid,\n    hasError: lastNameInputHasError,\n    handleInputChange: handleLastNameInputChange,\n    handleInputBlur: handleLastNameInputBlur,\n    reset: resetLastName,\n  } = useBasicInput((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredEmail,\n    isValid: emailIsValid,\n    hasError: emailInputHasError,\n    handleInputChange: handleEmailInputChange,\n    handleInputBlur: handleEmilInputBlur,\n    reset: resetEmail,\n  } = useBasicInput((value) =>\n    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(\n      value\n    )\n  );\n\n  let formIsValid = false;\n\n  if (nameInputIsValid && lastNameIsValid && emailIsValid) {\n    formIsValid = true;\n  }\n  const handleFormSubmission = (e) => {\n    e.preventDefault();\n\n    if (!nameInputIsValid && !lastNameIsValid && !emailIsValid) {\n      return;\n    }\n    console.log(enteredName, enteredLastName);\n    resetName();\n    resetLastName();\n    resetEmail();\n  };\n\n  const nameInputClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const lastNameInputClasses = lastNameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={handleFormSubmission}>\n      <div className=\"control-group\">\n        <div className={nameInputClasses}>\n          <label htmlFor=\"name\">First Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            value={enteredName}\n            onChange={handleNameInputChange}\n            onBlur={handleNameInputBlur}\n          />\n          {nameInputHasError && <p>Name can't be empty</p>}\n        </div>\n        <div className={lastNameInputClasses}>\n          <label htmlFor=\"lastname\">Last Name</label>\n          <input\n            type=\"text\"\n            id=\"lastname\"\n            value={enteredLastName}\n            onChange={handleLastNameInputChange}\n            onBlur={handleLastNameInputBlur}\n          />\n          {lastNameInputHasError && <p>Name can't be empty</p>}\n        </div>\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">E-Mail Address</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          value={enteredEmail}\n          onBlur={handleEmilInputBlur}\n          onChange={handleEmailInputChange}\n        />\n        {emailInputHasError && <p>Name can't be empty</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid} type=\"submit\">\n          Submit\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n"]},"metadata":{},"sourceType":"module"}